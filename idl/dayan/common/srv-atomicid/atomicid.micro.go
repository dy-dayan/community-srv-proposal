// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: atomicid.proto

/*
Package dayan_common_srv_atomicid is a generated protocol buffer package.

It is generated from these files:
	atomicid.proto

It has these top-level messages:
	GetIDReq
	GetIDResp
*/
package dayan_common_srv_atomicid

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/dy-dayan/community-srv-proposal/idl"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AtomicID service

type AtomicIDService interface {
	GetID(ctx context.Context, in *GetIDReq, opts ...client.CallOption) (*GetIDResp, error)
}

type atomicIDService struct {
	c    client.Client
	name string
}

func NewAtomicIDService(name string, c client.Client) AtomicIDService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "dayan.common.srv.atomicid"
	}
	return &atomicIDService{
		c:    c,
		name: name,
	}
}

func (c *atomicIDService) GetID(ctx context.Context, in *GetIDReq, opts ...client.CallOption) (*GetIDResp, error) {
	req := c.c.NewRequest(c.name, "AtomicID.GetID", in)
	out := new(GetIDResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AtomicID service

type AtomicIDHandler interface {
	GetID(context.Context, *GetIDReq, *GetIDResp) error
}

func RegisterAtomicIDHandler(s server.Server, hdlr AtomicIDHandler, opts ...server.HandlerOption) error {
	type atomicID interface {
		GetID(ctx context.Context, in *GetIDReq, out *GetIDResp) error
	}
	type AtomicID struct {
		atomicID
	}
	h := &atomicIDHandler{hdlr}
	return s.Handle(s.NewHandler(&AtomicID{h}, opts...))
}

type atomicIDHandler struct {
	AtomicIDHandler
}

func (h *atomicIDHandler) GetID(ctx context.Context, in *GetIDReq, out *GetIDResp) error {
	return h.AtomicIDHandler.GetID(ctx, in, out)
}
