// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proposal.proto

/*
Package dayan_community_srv_proposal is a generated protocol buffer package.

It is generated from these files:
	proposal.proto

It has these top-level messages:
	NewProposalReq
	NewProposalResp
	ModifyProposalReq
	ModifyProposalResp
	CommentProposalReq
	CommentProposalResp
	VoteProposalReq
	VoteProposalResp
*/
package dayan_community_srv_proposal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/dy-dayan/community-srv-proposal/idl"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Proposal service

type ProposalService interface {
	// 增加议案
	NewProposal(ctx context.Context, in *NewProposalReq, opts ...client.CallOption) (*NewProposalResp, error)
	// 修改议案
	ModifyProposal(ctx context.Context, in *ModifyProposalReq, opts ...client.CallOption) (*ModifyProposalResp, error)
	// 评论议案
	CommentProposal(ctx context.Context, in *CommentProposalReq, opts ...client.CallOption) (*CommentProposalResp, error)
	// 议案投票
	VoteProposal(ctx context.Context, in *VoteProposalReq, opts ...client.CallOption) (*VoteProposalResp, error)
}

type proposalService struct {
	c    client.Client
	name string
}

func NewProposalService(name string, c client.Client) ProposalService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "dayan.community.srv.proposal"
	}
	return &proposalService{
		c:    c,
		name: name,
	}
}

func (c *proposalService) NewProposal(ctx context.Context, in *NewProposalReq, opts ...client.CallOption) (*NewProposalResp, error) {
	req := c.c.NewRequest(c.name, "Proposal.NewProposal", in)
	out := new(NewProposalResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proposalService) ModifyProposal(ctx context.Context, in *ModifyProposalReq, opts ...client.CallOption) (*ModifyProposalResp, error) {
	req := c.c.NewRequest(c.name, "Proposal.ModifyProposal", in)
	out := new(ModifyProposalResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proposalService) CommentProposal(ctx context.Context, in *CommentProposalReq, opts ...client.CallOption) (*CommentProposalResp, error) {
	req := c.c.NewRequest(c.name, "Proposal.CommentProposal", in)
	out := new(CommentProposalResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proposalService) VoteProposal(ctx context.Context, in *VoteProposalReq, opts ...client.CallOption) (*VoteProposalResp, error) {
	req := c.c.NewRequest(c.name, "Proposal.VoteProposal", in)
	out := new(VoteProposalResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Proposal service

type ProposalHandler interface {
	// 增加议案
	NewProposal(context.Context, *NewProposalReq, *NewProposalResp) error
	// 修改议案
	ModifyProposal(context.Context, *ModifyProposalReq, *ModifyProposalResp) error
	// 评论议案
	CommentProposal(context.Context, *CommentProposalReq, *CommentProposalResp) error
	// 议案投票
	VoteProposal(context.Context, *VoteProposalReq, *VoteProposalResp) error
}

func RegisterProposalHandler(s server.Server, hdlr ProposalHandler, opts ...server.HandlerOption) error {
	type proposal interface {
		NewProposal(ctx context.Context, in *NewProposalReq, out *NewProposalResp) error
		ModifyProposal(ctx context.Context, in *ModifyProposalReq, out *ModifyProposalResp) error
		CommentProposal(ctx context.Context, in *CommentProposalReq, out *CommentProposalResp) error
		VoteProposal(ctx context.Context, in *VoteProposalReq, out *VoteProposalResp) error
	}
	type Proposal struct {
		proposal
	}
	h := &proposalHandler{hdlr}
	return s.Handle(s.NewHandler(&Proposal{h}, opts...))
}

type proposalHandler struct {
	ProposalHandler
}

func (h *proposalHandler) NewProposal(ctx context.Context, in *NewProposalReq, out *NewProposalResp) error {
	return h.ProposalHandler.NewProposal(ctx, in, out)
}

func (h *proposalHandler) ModifyProposal(ctx context.Context, in *ModifyProposalReq, out *ModifyProposalResp) error {
	return h.ProposalHandler.ModifyProposal(ctx, in, out)
}

func (h *proposalHandler) CommentProposal(ctx context.Context, in *CommentProposalReq, out *CommentProposalResp) error {
	return h.ProposalHandler.CommentProposal(ctx, in, out)
}

func (h *proposalHandler) VoteProposal(ctx context.Context, in *VoteProposalReq, out *VoteProposalResp) error {
	return h.ProposalHandler.VoteProposal(ctx, in, out)
}
